#! /usr/bin/env perl
#
# Script to update products in Solr index

use strict;
use warnings;

use Dancer;
use Angler::Interchange6::Schema; # load before Dancer::Plugin::Interchange6
use Dancer::Plugin::Interchange6;

my $schema = shop_schema;

use Data::Dumper;
use Interchange::Search::Solr;

# initiate Solr object
my $solr = Interchange::Search::Solr->new(solr_url => config->{solr_url});

my $product_rs =
  $schema->resultset('Product')
  ->with_average_rating
  ->with_highest_price
  ->with_lowest_selling_price
  ->with_variant_count
  ->prefetch(
    [ 'variants', 'navigation_products' ] );

if (@ARGV) {
    # specific product
    $product_rs = $product_rs->search({sku => shift});
}
else {
    # all active canonical products
    $product_rs = $product_rs->active->canonical_only;
}

my ($product, $data);

while ($product = $product_rs->next) {
    $data = solr_hash($product);
    print Dumper($data);
    solr_run_update($solr, $data);
}

sub solr_run_update {
    my ($solr, $data) = @_;

    print "adding $data->{sku}\n";
    my $ret = $solr->maintainer_update('add', $data);

    if ($ret->solr_status) {
        die "Failed to update Solr index for ", $data->{sku}, ": ", $ret->{content}->{error}->{msg}, "\n";
    }

    return $ret;
}

sub solr_hash {
    my $product = shift;
    my %record;

    # add "canonical" data
    %record = (sku => $product->sku,
               canonical_sku => $product->canonical_sku,
               name => $product->name,
               description => $product->description,
               gtin => $product->gtin || '',
               uri => $product->uri,
               price => $product->price,
               selling_price => $product->selling_price || 0,
               created => solr_date_format($product->created),
               last_modified => solr_date_format($product->last_modified),
               active => $product->active,
               image => $product->image,
               average_rating => $product->average_rating,
               navigation_ids => [ map { $_->navigation_id } $product->navigation_products ],
           );
    my $variants_rs = $product->variants;
    print "Found " . $product->variant_count . " variants\n";
    my %attributes_found;
    while (my $variant = $variants_rs->next) {
        for my $att_name (@{config->{facet_fields}->{attributes}}) {
            if (my $att_value = $variant->find_attribute_value({name => $att_name, type => 'variant'})) {
                if (!$attributes_found{$att_name}{$att_value}) {
                    $attributes_found{$att_name}{$att_value} = 1;
                    $record{$att_name} ||= [];
                    push @{$record{$att_name}}, $att_value;
                }
            }
        }
    }
    return \%record;
}

sub solr_date_format {
    my $dt = shift;
    return $dt->strftime('%FT%TZ');
}

