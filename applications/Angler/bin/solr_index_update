#! /usr/bin/env perl
#
# Script to update products in Solr index

use strict;
use warnings;

use Dancer;
use Angler::Interchange6::Schema; # load before Dancer::Plugin::Interchange6
use Dancer::Plugin::Interchange6;

my $schema = shop_schema;

use Data::Dumper;
use Interchange::Search::Solr;
use DateTime;

# initiate Solr object
my $solr = Interchange::Search::Solr->new(solr_url => config->{solr_url});

my $now = DateTime->now;

my $product_rs =
  $schema->resultset('Product')
  ->with_average_rating
  ->with_highest_price
  ->with_lowest_selling_price
  ->with_variant_count
  ->search(
      {},
      {
          prefetch => [
              {
                  variants => [
                      'price_modifiers',
                      {
                          product_attributes => [
                              'attribute',
                              {
                                  product_attribute_values => 'attribute_value'
                              }
                          ]
                      },
                  ]
              },
              'navigation_products',
          ]
      }
  );

if (@ARGV) {
    # specific product
    $product_rs = $product_rs->search({sku => shift});
}
else {
    # all active canonical products
    $product_rs = $product_rs->active->canonical_only;
}

my $product_count =
  $schema->resultset('Product')->active->canonical_only->count;
my @updates;
my $time = time();
my $count = 0;

while (my $product = $product_rs->next) {

    $count++;
    my $data = solr_hash($product);
    print Dumper($data) if $ENV{DEBUG_SOLR};

    push @updates, $data;
    if (@updates >= 500) {
        solr_run_update($solr, \@updates);
        @updates = ();
        my $taken = time() - $time;
        print "indexed $count/$product_count in $taken seconds\n";
    }
}
if (@updates) {
    solr_run_update($solr, \@updates);
}
print "Completed $count records in " . ( time() - $time ) . " seconds\n";

sub solr_run_update {
    my ($solr, $data) = @_;

    my $ret = $solr->maintainer_update('add', $data);

    if ($ret->solr_status) {
        die "Failed to update Solr index: " . $ret->{content}->{error}->{msg};
    }

    return $ret;
}

sub solr_hash {
    my $product = shift;
    my %record;

    # add "canonical" data
    %record = (sku => $product->sku,
               canonical_sku => $product->canonical_sku,
               name => $product->name,
               description => $product->description,
               gtin => $product->gtin || '',
               uri => $product->uri,
               price => $product->price,
               highest_price => $product->highest_price,
               selling_price => $product->selling_price,
               created => solr_date_format($product->created),
               last_modified => solr_date_format($product->last_modified),
               active => $product->active,
               image => $product->image,
               average_rating => $product->average_rating,
               navigation_ids => [ map { $_->navigation_id } $product->navigation_products ],
           );

    my $variants_rs = $product->variants;
    print "Found " . $variants_rs->count . " variants\n" if $ENV{DEBUG_SOLR};
    my %attributes_found;
    my %prices = ( $product->selling_price => 1 );

    while (my $variant = $variants_rs->next) {
        my $prod_attr_rs = $variant->product_attributes;
        while ( my $pa = $prod_attr_rs->next ) {
            my $att_name = $pa->attribute->name;
            next unless $pa->attribute->type eq 'variant';
            next
              unless grep { $att_name eq $_ }
              @{ config->{facet_fields}->{attributes} };

            my $pav_rs = $pa->product_attribute_values;
            while ( my $pav = $pav_rs->next ) {
                my $att_value = $pav->attribute_value->value;
                if (!$attributes_found{$att_name}{$att_value}) {
                    $attributes_found{$att_name}{$att_value} = 1;
                    $record{$att_name} ||= [];
                    push @{$record{$att_name}}, $att_value;
                }
            }
        }

        my $price = $variant->price;
        my $pm_rs = $variant->price_modifiers;
        while ( my $pm = $pm_rs->next ) {
            next
            if (   $pm->quantity > 1
                || $pm->roles_id
                || $pm->start_date > $now
                || $pm->end_date < $now
                || $pm->price >= $price );

            $price = $pm->price;
        }
        $prices{ $price } = 1;
    }
    push @{$record{prices}}, keys %prices;

    return \%record;
}

sub solr_date_format {
    my $dt = shift;
    return $dt->strftime('%FT%TZ');
}

