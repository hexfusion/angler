#! /usr/bin/env perl
#
# Update products from old live database.

use strict;
use warnings;

use Dancer ':script';
use Dancer::Plugin::Interchange6;
use Dancer::Plugin::Database;
use File::MimeInfo;
use File::Basename;


set logger => 'console';
set logger_format => '%m';
set log => 'debug';

my $dbh = database;

# $dbh->quick_delete('products', {});

my @products = $dbh->quick_select('products', {});

my $medialocation = File::Spec->catdir(qw/public images products 975x975/);

unless (-d $medialocation) {
    die "Directory $medialocation doesn't exist, please add a symlink or create it";
}

my $default_image_path = File::Spec->catfile(qw/public images products
                                                975x975
                                                img_product_default.jpg/);



#shop_product->search()->delete;

my %navigation_map = ('Rods' => 'Fly Rods',
    'Waders' => 'Waders',
    'Reels' => 'Fly Reels',
    'Boxes' => 'Fly Boxes',
    'Raingear' => 'Jackets',
    'Softshell' => 'Jackets',
    'Nets' => 'Landing Nets',
    'Vests' => 'Packs & Vests',
    'Luggage' => 'Bags & Luggage',
    'Bags' => 'Bags & Luggage',
    'Socks' => 'Socks',
    'Layering' => 'Layering',
    'Pants' => 'Pants',
    'Gadgets' => 'Tools & Gadgets',
    'Lines' => 'Fly Line & Backing',
    'Underwear' => 'Underwear',
    'Hats' => 'Hats',
    'Shorts' => 'Shorts',
    'Shirt' => 'Shirts',
    'Shirts' => 'Shirts',
    'Headlamps' => 'Tools & Gadgets',
    'Dvd' => 'Books & DVDs',
    'Books' => 'Books & DVDs',
    );

my $mf_map = setup_manufacturers($dbh, shop_schema);

my @variants = $dbh->quick_select('variants', {});
my %sizes;
my @size_values;

for my $var (@variants) {
    if ($var->{size} && ! exists $sizes{$var->{size}}) {
        $sizes{$var->{size}} = 1;
        push @size_values, {value => $var->{size},
                            title => $var->{size},
                        }
    }
}

# delete size attribute
my $size_att = shop_schema->resultset('Attribute')->find({name => 'size'});

if ($size_att) {
    $size_att->delete;
};

# create size attribute
my $size_data = {name => 'size', title => 'Size', type => 'variant', priority => 1,
                 AttributeValue => \@size_values,
             };

$size_att = shop_schema->resultset('Attribute')->create($size_data);

for my $product (@products) {
    my $object;

    my %record = (sku => $product->{sku},
                  name => $product->{description},
                  short_description => $product->{comment_short} || '',
                  price => $product->{price},
                  active => ! $product->{inactive},
              );
    
    if (! ($object = shop_product->find($product->{sku}))) {
        debug "Product $product->{sku} missing.\n";

        $object = shop_product->create(\%record);
    }
    else {
        $object->update(\%record);
    }

    ### Media IMAGE handling ###
    my $media = get_image_by_name($product->{image});
    $object->add_to_media($media);

    if ($product->{category} && exists $navigation_map{$product->{category}}) {
        if (my $nav = shop_navigation->find({name => $navigation_map{$product->{category}}})) {
            shop_schema->resultset('NavigationProduct')->find_or_create({sku => $product->{sku},
                                                                         navigation_id => $nav->id});
        }
        else {
            warning "Category $navigation_map{$product->{category}} not found.";
        }
    }

    # add link for manufacturer
    if ($product->{manufacturer}) {
        $object->create_related('NavigationProduct', {
            navigation_id => $mf_map->{$product->{manufacturer}},
        })
    }

    # get rid of existing variants
    my $old_variants = $object->search_related('Variant');

    $old_variants->delete;

    # get all variants for this product
    my @variants = $dbh->quick_select('variants', {sku => $product->{sku}});
    my @var_data;

    for my $var (@variants) {
        if ($var->{size}) {
#            debug "Variant $var->{code} for SKU $product->{sku} with size $var->{size}";
            push @var_data, {size => $var->{size},
                             sku => $var->{code},
                         };
        }
    }

    if (@var_data) {
        $object->add_variants(@var_data);
    }
    foreach my $var (@variants) {
        my $newvar = shop_schema->resultset('Product')->find($var->{code});
        if ($newvar) {
            my $variantimage = $var->{image} || $product->{image};
            $newvar->add_to_media(get_image_by_name($variantimage));
            print "Added $variantimage to $var->{code}\n";
        }
        else {
            warn "Couldn't find $var->{code}!";
        }
    }
}

sub setup_manufacturers {
    my ($dbh, $schema) = @_;
    my (%nav_map, $nav);

    my @mf = $dbh->quick_select(
        'manufacturer',
        {},
        {columns => [qw/c_code c_alias/],
         order_by => {
             'ASC' => 'c_alias',
         },
     });

    $nav = $schema->resultset('Navigation');

    $nav->search({type => 'manufacturer'})->delete;

    for my $manufacturer (@mf) {
        # create navigation object
        my $nav_obj = $nav->create({uri => $manufacturer->{c_alias},
                                    name => $manufacturer->{c_alias},
                                    type => 'manufacturer',
                                });

        $nav_map{$manufacturer->{c_code}} = $nav_obj->id;
    }

    return \%nav_map;
}

sub get_image_by_name {
    my $imageuri = shift;
    my $image = {
                 mime_type => 'image/jpeg',
                 file  => $default_image_path,
                 uri => 'img_product_default.jpg',
                 media_type => {
                                type => 'image',
                               },
                };
    
    return $image unless $imageuri;
    my $file = File::Spec->catfile($medialocation, $imageuri);
    if (-f $file) {
        $image->{mime_type} = mimetype($file);
        $image->{file} = $file;
        $image->{uri} = $imageuri;
    }
    else {
        warn "$file not found!, using the default image!";
    }
    return $image;
}

