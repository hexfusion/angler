.\" Automatically generated by Pod::Man version 1.15
.\" Wed Oct 20 09:10:00 2004
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "IniConf 3"
.TH IniConf 3 "perl v5.6.1" "2004-10-20" "User Contributed Perl Documentation"
.UC
.SH "NAME"
IniConf \- A Module for reading .ini-style configuration files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IniConf;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IniConf provides a way to have readable configuration files outside
your Perl script.  The configuration can be safely reloaded upon
receipt of a signal.
.SH "USAGE"
.IX Header "USAGE"
Get a new IniConf object with the \fInew\fR method:
.PP
.Vb 2
\&  $cfg = IniConf->new( -file => "/path/configfile.ini" );
\&  $cfg = new IniConf -file => "/path/configfile.ini";
.Ve
Optional named parameters may be specified after the configuration
file name.  See the \fInew\fR in the \fB\s-1METHODS\s0\fR section, below.
.PP
\&\s-1INI\s0 files consist of a number of sections, each preceeded with the
section name in square brackets.  The first nonblank character of
the line indicating a section must be a left bracket and the last
nonblank character of a line indicating a section must be a right
bracket. The characters making up the section name can be any 
symbols at all. The section may even be be empty. However section
names must be unique.
.PP
Parameters are specified in each section as Name=Value.  Any spaces
around the equals sign will be ignored, and the value extends to the
end of the line
.PP
.Vb 2
\&  [section]
\&  Parameter=Value
.Ve
Both the hash mark (#) and the semicolon (;) are comment characters.
Lines that begin with either of these characters will be ignored.  Any
amount of whitespace may preceed the comment character.
.PP
Multiline or multivalued fields may also be defined ala \s-1UNIX\s0 \*(L"here
document\*(R" syntax:
.PP
.Vb 4
\&  Parameter=<<EOT
\&  value/line 1
\&  value/line 2
\&  EOT
.Ve
You may use any string you want in place of \*(L"\s-1EOT\s0\*(R".  Note that what
follows the \*(L"<<\*(R" and what appears at the end of the text \s-1MUST\s0 match
exactly, including any trailing whitespace.
.PP
See the \fB\s-1METHODS\s0\fR section, below, for settable options.
.PP
Values from the config file are fetched with the val method:
.PP
.Vb 1
\&  $value = $cfg->val('Section', 'Parameter');
.Ve
If you want a multi-line/value field returned as an array, just
specify an array as the receiver:
.PP
.Vb 1
\&  @values = $cfg->val('Section', 'Parameter');
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "new (\-file=>$filename, [\-option=>value ...] )"
.IX Subsection "new (-file=>$filename, [-option=>value ...] )"
Returns a new configuration object (or \*(L"undef\*(R" if the configuration
file has an error).  One IniConf object is required per configuration
file.  The following named parameters are available:
.Ip "\fI\-default\fR section" 10
.IX Item "-default section"
Specifies a section is used for default values.  For example, if you
look up the \*(L"permissions\*(R" parameter in the \*(L"users\*(R" section, but there
is none, IniConf will look to your default section for a \*(L"permissions\*(R"
value before returning undef.
.Ip "\fI\-reloadsig\fR signame" 10
.IX Item "-reloadsig signame"
You may specify a signal (such as \s-1SIGHUP\s0) that will cause the
configuration file to be read.  This is useful for static daemons
where a full restart in order to realize a configuration change would
be undesirable.  Note that your application must be tolerant of the
signal you choose.  If a signal handler was already in place before
the IniConf object is created, it will be called after the
configuration file is reread.  The signal handler will not be
re-enabled until after the configuration file is reread any the
previous signal handler returns.
.Ip "\fI\-reloadwarn\fR 0|1" 10
.IX Item "-reloadwarn 0|1"
Set \-reloadwarn => 1 to enable a warning message (output to \s-1STDERR\s0)
whenever the config file is reloaded.  The reload message is of the
form:
.Sp
.Vb 1
\&  PID <PID> reloading config file <file> at YYYY.MM.DD HH:MM:SS
.Ve
See your system documentation for information on valid signals.
.Ip "\fI\-nocase\fR 0|1" 10
.IX Item "-nocase 0|1"
Set \-nocase => 1 to handle the config file in a case-insensitive
manner (case in values is preserved, however).  By default, config
files are case-sensitive (i.e., a section named 'Test' is not the same
as a section named 'test').  Note that there is an added overhead for
turning off case sensitivity.
.Sh "val ($section, \f(CW$parameter\fP)"
.IX Subsection "val ($section, $parameter)"
Returns the value of the specified parameter in section \f(CW$section\fR.
.Sh "setval ($section, \f(CW$parameter\fP, \f(CW$value\fP, [ \f(CW$value2\fP, ... ])"
.IX Subsection "setval ($section, $parameter, $value, [ $value2, ... ])"
Sets the value of parameter \f(CW$section\fR in section \f(CW$section\fR to \f(CW$value\fR (or
to a set of values).  See below for methods to write the new
configuration back out to a file.
.PP
You may not set a parameter that didn't exist in the original
configuration file.  \fBsetval\fR will return \fIundef\fR if this is
attempted.  Otherwise, it returns 1.
.Sh "newval($setion, \f(CW$parameter\fP, \f(CW$value\fP [, \f(CW$value2\fP, ...])"
.IX Subsection "newval($setion, $parameter, $value [, $value2, ...])"
Adds a new value to the configuration file.
.Sh "delval($section, \f(CW$parameter\fP)"
.IX Subsection "delval($section, $parameter)"
Deletes the specified value from the configuration file
.Sh "ReadConfig"
.IX Subsection "ReadConfig"
Forces the config file to be re-read.  Also see the \fI\-reloadsig\fR
option to the \fBnew\fR method for a way to connect this method to a
signal (such as \s-1SIGHUP\s0).
.Sh "Sections"
.IX Subsection "Sections"
Returns an array containing section names in the configuration file.
If the \fInocase\fR option was turned on when the config object was
created, the section names will be returned in lowercase.
.Sh "Parameters ($sectionname)"
.IX Subsection "Parameters ($sectionname)"
Returns an array containing the parameters contained in the specified
section.
.Sh "GroupMembers ($group)"
.IX Subsection "GroupMembers ($group)"
Returns an array containing the members of specified \f(CW$group\fR.  Groups
are specified in the config file as new sections of the form
.PP
.Vb 1
\&  [GroupName MemberName]
.Ve
This is useful for building up lists.  Note that parameters within a
\&\*(L"member\*(R" section are referenced normally (i.e., the section name is
still \*(L"Groupname Membername\*(R", including the space).
.Sh "WriteConfig ($filename)"
.IX Subsection "WriteConfig ($filename)"
Writes out a new copy of the configuration file.  A temporary file
(ending in .new) is written out and then renamed to the specified
filename.  Also see \fB\s-1BUGS\s0\fR below.
.Sh "RewriteConfig"
.IX Subsection "RewriteConfig"
Same as WriteConfig, but specifies that the original configuration
file should be rewritten.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.Sh "@IniConf::errors"
.IX Subsection "@IniConf::errors"
Contains a list of errors encountered while parsing the configuration
file.  If the \fInew\fR method returns \fBundef\fR, check the value of this
to find out what's wrong.  This value is reset each time a config file
is read.
.SH "BUGS"
.IX Header "BUGS"
.Ip "\(bu" 3
IniConf won't know if you change the signal handler that it's using
for config reloads.
.Ip "\(bu" 3
The signal handling stuff is almost guaranteed not to work on non-UNIX
systems.
.Ip "\(bu" 3
The output from [Re]WriteConfig/OutputConfig might not be as pretty as
it can be.  Comments are tied to whatever was immediately below them.
.Ip "\(bu" 3
No locking is done by [Re]WriteConfig.  When writing servers, take
care that only the parent ever calls this, and consider making your
own backup.
.Ip "\(bu" 3
The Windows \s-1INI\s0 specification (if there is one) probably isn't
followed exactly.  First and foremost, IniConf is for making
easy-to-maintain (and read) configuration files.
.SH "VERSION"
.IX Header "VERSION"
Version 0.97
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&  Scott Hutton
\&    E-Mail:        shutton@pobox.com
\&    WWW Home Page: http://www.pobox.com/~shutton/
.Ve
.Vb 3
\&  Later hacked on by Rich Bowen
\&        E-Mail:                 rbowen@rcbowen.com
\&        URL:                    http://www.rcbowen.com/
.Ve
.Vb 2
\&  Patches contributed by Bernie Cosell, Alex Satrapa, Scott Dellinger,
\&  Steve Campbell, R. Bernsteid, and various other generous people. Thanks.
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996,1997 Scott Hutton. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.
.SH "To do"
.IX Header "To do"
In a soon-coming release, this code will move to the name \f(CW\*(C`Config::IniFiles\*(C'\fR
This is because there are a lot of configuration modules that are 
floating around in various different name spaces. It would be nice if
namespaces meant something. I don't know when that will be, but hopefully
in the next few months.
