.\" Automatically generated by Pod::Man version 1.15
.\" Wed Oct 20 09:10:02 2004
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Vend::Payment::PRI 3"
.TH Vend::Payment::PRI 3 "perl v5.6.1" "2004-06-07" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Vend::Payment::PRI \- Interchange \s-1PRI\s0 Support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=PRI
.Ve
.Vb 1
\&        or
.Ve
.Vb 1
\&    [charge mode=PRI param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 1
\&  Net::SSLeay
.Ve
.Vb 1
\&    or
.Ve
.Vb 1
\&  LWP::UserAgent and Crypt::SSLeay
.Ve
Only one of these need be present and working.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::PRI module implements the \fIPRI()\fR routine for using
Payment Resources International payment services with Interchange. It is
compatible on a call level with the other Interchange payment modules \*(-- in
theory (and even usually in practice) you could switch from CyberCash to \s-1PRI\s0
with a few configuration file changes.
.PP
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::PRI
.Ve
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
\&\s-1NOTE:\s0 Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`PRI\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  PRI
.Ve
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=PRI id=YourPRIID]
.Ve
or
.PP
.Vb 1
\&    Route PRI id YourPRIID
.Ve
or with only \s-1PRI\s0 as a payment provider
.PP
.Vb 1
\&    Variable MV_PAYMENT_ID      YourPRIID
.Ve
A fully valid catalog.cfg entry to work with the standard demo would be:
.PP
.Vb 7
\&    Variable MV_PAYMENT_MODE    "__MV_PAYMENT_MODE__"
\&                Route  PRI      id          "__PRI_ID__"
\&                Route  PRI      regkey      "__PRI_REGKEY__"
\&                Route  PRI      test_id     "__PRI_TEST_ID__"
\&                Route  PRI      test_regkey "__PRI_TEST_REGKEY__"
\&                Route  PRI      test_mode   "__PRI_TEST_MODE__"
\&                Route  PRI      refid_mode  "__PRI_REFID_MODE__"
.Ve
A fully valid variable.txt entry to work with the \s-1PRI\s0 module would be:
.PP
.Vb 7
\&                MV_PAYMENT_MODE PRI     Payment
\&                PRI_ID  your_pri_id     Payment
\&                PRI_REGKEY      your_pri_regkey Payment
\&                PRI_TEST_ID     your_pri_test_id        Payment
\&                PRI_TEST_REGKEY your_pri_test_regkey    Payment
\&                PRI_TEST_MODE   1       Payment
\&                PRI_REFID_MODE  1       Payment
.Ve
The active settings are:
.Ip "id" 4
.IX Item "id"
\&\s-1PRI\s0 will supply you with both a test id and production id.  Enter both of these numbers into the the variables above.  You do not need your production id to test. 
.Ip "regkey" 4
.IX Item "regkey"
\&\s-1PRI\s0 will supply you with both a test regkey and production regkey.  Enter both of these numbers into the the variables above.  You do not need your production regkey to test. 
.Ip "refid" 4
.IX Item "refid"
The \s-1PRI\s0 interface allows (requires) a field called \s-1REFID\s0.  This field is stored along with the transaction on the \s-1PRI\s0 server and allows your to do quick searches for transactions if this number has meaning.  There are three possible values for the \s-1PRI_REFID_MODE\s0 variable.  1,2 or any other character or null.  
.Sp
.Vb 3
\&        1.  A "1" in the pri_refid_mode instructs interchange to read the current
\&        order number in $Variable->{MV_ORDER_COUNTER_FILE} or "etc/order.number",
\&        increment it by one and use that.  This is the recommended mode.
.Ve
.Vb 2
\&        2. A "2" in the pri_refid_mode instructs interchange to use the users
\&        session_id as the value.
.Ve
.Vb 3
\&        3. Anything other than a 1 or 2 instructs interchange to generate a unique
\&        number from the unix date command and use that.  The number format is Day of
\&        year, Hours, Minutes, Seconds.  Example for Jan 1, at 1:00:30 is 001130030.
.Ve
.Ip "transaction" 4
.IX Item "transaction"
At this time the \s-1PRI\s0 payment module only processes transactions of type \s-1SALE\s0.
.Ip "test" 4
.IX Item "test"
Testing with \s-1PRI\s0 is straight forward.  At this time (2004\-05\-15), \s-1PRI\s0 uses the same server for both development and production.  The only difference is the account used.  Some accounts are flagged as \s-1TEST\s0 accounts and others are live.  When you first sign up with \s-1PRI\s0 they will supply you a test account and test Registration Key to use.  Enter those numbers in the \s-1PRI_ID\s0, \s-1PRI_REGKEY\s0 (production) and \s-1PRI_TEST_ID\s0, \s-1PRI_TEST_REGKEY\s0 (test) variables.  Set the \s-1PRI_TEST_MORE\s0 to a value of 1 then do your testing.  Once everything is working correctly, simply set \s-1PRI_TEST_MODE\s0 to 0 and restart interchange.  Your now live.
.Ip "generate_error" 4
.IX Item "generate_error"
To generate errors in test mode (while using your test \s-1ID\s0 and regkey) simply enter transactions with bad data and see what happens.  \s-1PRI\s0 will supply you with a list of test credit card numbers and amounts that they are good for. 
.RS 4
.Ip "submit_url" 4
.IX Item "submit_url"
\&\s-1PRI\s0 uses different \s-1URL\s0's depending on what type of transaction you are requesting, Sale, Reccuring, Void etc..  The default \s-1URL\s0 for single sale transactions is
.Sp
.Vb 1
\&         https://webservices.primerchants.com/billing/TransactionCentral/processCC.asp?
.Ve
At this time, this is the only \s-1URL\s0 supported by this \s-1PRI\s0 module
.RE
.RS 4
.Sh "Troubleshooting"
.IX Subsection "Troubleshooting"
If nothing works:
.RS 4
.RE
.Ip "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::PRI
.Ve
.Ip "\(bu" 4
Make sure either Net::SSLeay or Crypt::SSLeay and \s-1LWP:\s0:UserAgent are installed
and working. You can test to see whether your Perl thinks they are:
.Sp
.Vb 1
\&    perl -MNet::SSLeay -e 'print "It works\en"'
.Ve
or
.Sp
.Vb 1
\&    perl -MLWP::UserAgent -MCrypt::SSLeay -e 'print "It works\en"'
.Ve
If either one prints \*(L"It works.\*(R" and returns to the prompt you should be \s-1OK\s0
(presuming they are in working order otherwise).
.Ip "\(bu" 4
Check the error logs, both catalog and global.
.Ip "\(bu" 4
Make sure you set your account \s-1ID\s0 properly.  
.Ip "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <XMP>
\&    [calc]
\&        my $string = $Tag->uneval( { ref => $Session->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calc]
\&    </XMP>
.Ve
That should show what happened.
.Ip "\(bu" 4
If all else fails, consultants are available to help with integration for a fee.
See http://www.icdevgroup.org/
.RE
.RS 4
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::PRI. It changes packages
to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally developed by New York Connect Net (http://nyct.net)
Michael Bacarella <mbac@nyct.net>
.Sp
Modified for GetCareer.com by Slipstream.com by Troy Davis <troy@slipstream.com>
.Sp
LWP/Crypt::SSLeay interface code by Matthew Schick,
<mschick@brightredproductions.com>.
.Sp
Interchange implementation by Mike Heins.
.Sp
\&\s-1PRI\s0 modification by Marty Tennison
